// Code generated by "enumer -type=Register"; DO NOT EDIT.

package mfrc522

import (
	"fmt"
	"strings"
)

const (
	_RegisterName_0      = "CommandRegComIEnRegDivIEnRegComIrqRegDivIrqRegErrorRegStatus1RegStatus2RegFIFODataRegFIFOLevelRegWaterLevelRegControlRegBitFramingRegCollReg"
	_RegisterLowerName_0 = "commandregcomienregdivienregcomirqregdivirqregerrorregstatus1regstatus2regfifodataregfifolevelregwaterlevelregcontrolregbitframingregcollreg"
	_RegisterName_1      = "ModeRegTxModeRegRxModeRegTxControlRegTxASKRegTxSelRegRxSelRegRxThresholdRegDemodReg"
	_RegisterLowerName_1 = "moderegtxmoderegrxmoderegtxcontrolregtxaskregtxselregrxselregrxthresholdregdemodreg"
	_RegisterName_2      = "MfTxRegMfRxReg"
	_RegisterLowerName_2 = "mftxregmfrxreg"
	_RegisterName_3      = "SerialSpeedReg"
	_RegisterLowerName_3 = "serialspeedreg"
	_RegisterName_4      = "CRCResultRegHCRCResultRegL"
	_RegisterLowerName_4 = "crcresultreghcrcresultregl"
	_RegisterName_5      = "ModWidthReg"
	_RegisterLowerName_5 = "modwidthreg"
	_RegisterName_6      = "RFCfgRegGsNRegCWGsPRegModGsPRegTModeRegTPrescalerRegTReloadRegHTReloadRegLTCounterValueRegHTCounterValueRegL"
	_RegisterLowerName_6 = "rfcfgreggsnregcwgspregmodgspregtmoderegtprescalerregtreloadreghtreloadregltcountervaluereghtcountervalueregl"
	_RegisterName_7      = "TestSel1RegTestSel2RegTestPinEnRegTestPinValueRegTestBusRegAutoTestRegVersionRegAnalogTestRegTestDAC1RegTestDAC2RegTestADCReg"
	_RegisterLowerName_7 = "testsel1regtestsel2regtestpinenregtestpinvalueregtestbusregautotestregversionreganalogtestregtestdac1regtestdac2regtestadcreg"
)

var (
	_RegisterIndex_0 = [...]uint8{0, 10, 19, 28, 37, 46, 54, 64, 74, 85, 97, 110, 120, 133, 140}
	_RegisterIndex_1 = [...]uint8{0, 7, 16, 25, 37, 45, 53, 61, 75, 83}
	_RegisterIndex_2 = [...]uint8{0, 7, 14}
	_RegisterIndex_3 = [...]uint8{0, 14}
	_RegisterIndex_4 = [...]uint8{0, 13, 26}
	_RegisterIndex_5 = [...]uint8{0, 11}
	_RegisterIndex_6 = [...]uint8{0, 8, 14, 22, 31, 39, 52, 63, 74, 91, 108}
	_RegisterIndex_7 = [...]uint8{0, 11, 22, 34, 49, 59, 70, 80, 93, 104, 115, 125}
)

func (i Register) String() string {
	switch {
	case 1 <= i && i <= 14:
		i -= 1
		return _RegisterName_0[_RegisterIndex_0[i]:_RegisterIndex_0[i+1]]
	case 17 <= i && i <= 25:
		i -= 17
		return _RegisterName_1[_RegisterIndex_1[i]:_RegisterIndex_1[i+1]]
	case 28 <= i && i <= 29:
		i -= 28
		return _RegisterName_2[_RegisterIndex_2[i]:_RegisterIndex_2[i+1]]
	case i == 31:
		return _RegisterName_3
	case 33 <= i && i <= 34:
		i -= 33
		return _RegisterName_4[_RegisterIndex_4[i]:_RegisterIndex_4[i+1]]
	case i == 36:
		return _RegisterName_5
	case 38 <= i && i <= 47:
		i -= 38
		return _RegisterName_6[_RegisterIndex_6[i]:_RegisterIndex_6[i+1]]
	case 49 <= i && i <= 59:
		i -= 49
		return _RegisterName_7[_RegisterIndex_7[i]:_RegisterIndex_7[i+1]]
	default:
		return fmt.Sprintf("Register(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RegisterNoOp() {
	var x [1]struct{}
	_ = x[CommandReg-(1)]
	_ = x[ComIEnReg-(2)]
	_ = x[DivIEnReg-(3)]
	_ = x[ComIrqReg-(4)]
	_ = x[DivIrqReg-(5)]
	_ = x[ErrorReg-(6)]
	_ = x[Status1Reg-(7)]
	_ = x[Status2Reg-(8)]
	_ = x[FIFODataReg-(9)]
	_ = x[FIFOLevelReg-(10)]
	_ = x[WaterLevelReg-(11)]
	_ = x[ControlReg-(12)]
	_ = x[BitFramingReg-(13)]
	_ = x[CollReg-(14)]
	_ = x[ModeReg-(17)]
	_ = x[TxModeReg-(18)]
	_ = x[RxModeReg-(19)]
	_ = x[TxControlReg-(20)]
	_ = x[TxASKReg-(21)]
	_ = x[TxSelReg-(22)]
	_ = x[RxSelReg-(23)]
	_ = x[RxThresholdReg-(24)]
	_ = x[DemodReg-(25)]
	_ = x[MfTxReg-(28)]
	_ = x[MfRxReg-(29)]
	_ = x[SerialSpeedReg-(31)]
	_ = x[CRCResultRegH-(33)]
	_ = x[CRCResultRegL-(34)]
	_ = x[ModWidthReg-(36)]
	_ = x[RFCfgReg-(38)]
	_ = x[GsNReg-(39)]
	_ = x[CWGsPReg-(40)]
	_ = x[ModGsPReg-(41)]
	_ = x[TModeReg-(42)]
	_ = x[TPrescalerReg-(43)]
	_ = x[TReloadRegH-(44)]
	_ = x[TReloadRegL-(45)]
	_ = x[TCounterValueRegH-(46)]
	_ = x[TCounterValueRegL-(47)]
	_ = x[TestSel1Reg-(49)]
	_ = x[TestSel2Reg-(50)]
	_ = x[TestPinEnReg-(51)]
	_ = x[TestPinValueReg-(52)]
	_ = x[TestBusReg-(53)]
	_ = x[AutoTestReg-(54)]
	_ = x[VersionReg-(55)]
	_ = x[AnalogTestReg-(56)]
	_ = x[TestDAC1Reg-(57)]
	_ = x[TestDAC2Reg-(58)]
	_ = x[TestADCReg-(59)]
}

var _RegisterValues = []Register{CommandReg, ComIEnReg, DivIEnReg, ComIrqReg, DivIrqReg, ErrorReg, Status1Reg, Status2Reg, FIFODataReg, FIFOLevelReg, WaterLevelReg, ControlReg, BitFramingReg, CollReg, ModeReg, TxModeReg, RxModeReg, TxControlReg, TxASKReg, TxSelReg, RxSelReg, RxThresholdReg, DemodReg, MfTxReg, MfRxReg, SerialSpeedReg, CRCResultRegH, CRCResultRegL, ModWidthReg, RFCfgReg, GsNReg, CWGsPReg, ModGsPReg, TModeReg, TPrescalerReg, TReloadRegH, TReloadRegL, TCounterValueRegH, TCounterValueRegL, TestSel1Reg, TestSel2Reg, TestPinEnReg, TestPinValueReg, TestBusReg, AutoTestReg, VersionReg, AnalogTestReg, TestDAC1Reg, TestDAC2Reg, TestADCReg}

var _RegisterNameToValueMap = map[string]Register{
	_RegisterName_0[0:10]:         CommandReg,
	_RegisterLowerName_0[0:10]:    CommandReg,
	_RegisterName_0[10:19]:        ComIEnReg,
	_RegisterLowerName_0[10:19]:   ComIEnReg,
	_RegisterName_0[19:28]:        DivIEnReg,
	_RegisterLowerName_0[19:28]:   DivIEnReg,
	_RegisterName_0[28:37]:        ComIrqReg,
	_RegisterLowerName_0[28:37]:   ComIrqReg,
	_RegisterName_0[37:46]:        DivIrqReg,
	_RegisterLowerName_0[37:46]:   DivIrqReg,
	_RegisterName_0[46:54]:        ErrorReg,
	_RegisterLowerName_0[46:54]:   ErrorReg,
	_RegisterName_0[54:64]:        Status1Reg,
	_RegisterLowerName_0[54:64]:   Status1Reg,
	_RegisterName_0[64:74]:        Status2Reg,
	_RegisterLowerName_0[64:74]:   Status2Reg,
	_RegisterName_0[74:85]:        FIFODataReg,
	_RegisterLowerName_0[74:85]:   FIFODataReg,
	_RegisterName_0[85:97]:        FIFOLevelReg,
	_RegisterLowerName_0[85:97]:   FIFOLevelReg,
	_RegisterName_0[97:110]:       WaterLevelReg,
	_RegisterLowerName_0[97:110]:  WaterLevelReg,
	_RegisterName_0[110:120]:      ControlReg,
	_RegisterLowerName_0[110:120]: ControlReg,
	_RegisterName_0[120:133]:      BitFramingReg,
	_RegisterLowerName_0[120:133]: BitFramingReg,
	_RegisterName_0[133:140]:      CollReg,
	_RegisterLowerName_0[133:140]: CollReg,
	_RegisterName_1[0:7]:          ModeReg,
	_RegisterLowerName_1[0:7]:     ModeReg,
	_RegisterName_1[7:16]:         TxModeReg,
	_RegisterLowerName_1[7:16]:    TxModeReg,
	_RegisterName_1[16:25]:        RxModeReg,
	_RegisterLowerName_1[16:25]:   RxModeReg,
	_RegisterName_1[25:37]:        TxControlReg,
	_RegisterLowerName_1[25:37]:   TxControlReg,
	_RegisterName_1[37:45]:        TxASKReg,
	_RegisterLowerName_1[37:45]:   TxASKReg,
	_RegisterName_1[45:53]:        TxSelReg,
	_RegisterLowerName_1[45:53]:   TxSelReg,
	_RegisterName_1[53:61]:        RxSelReg,
	_RegisterLowerName_1[53:61]:   RxSelReg,
	_RegisterName_1[61:75]:        RxThresholdReg,
	_RegisterLowerName_1[61:75]:   RxThresholdReg,
	_RegisterName_1[75:83]:        DemodReg,
	_RegisterLowerName_1[75:83]:   DemodReg,
	_RegisterName_2[0:7]:          MfTxReg,
	_RegisterLowerName_2[0:7]:     MfTxReg,
	_RegisterName_2[7:14]:         MfRxReg,
	_RegisterLowerName_2[7:14]:    MfRxReg,
	_RegisterName_3[0:14]:         SerialSpeedReg,
	_RegisterLowerName_3[0:14]:    SerialSpeedReg,
	_RegisterName_4[0:13]:         CRCResultRegH,
	_RegisterLowerName_4[0:13]:    CRCResultRegH,
	_RegisterName_4[13:26]:        CRCResultRegL,
	_RegisterLowerName_4[13:26]:   CRCResultRegL,
	_RegisterName_5[0:11]:         ModWidthReg,
	_RegisterLowerName_5[0:11]:    ModWidthReg,
	_RegisterName_6[0:8]:          RFCfgReg,
	_RegisterLowerName_6[0:8]:     RFCfgReg,
	_RegisterName_6[8:14]:         GsNReg,
	_RegisterLowerName_6[8:14]:    GsNReg,
	_RegisterName_6[14:22]:        CWGsPReg,
	_RegisterLowerName_6[14:22]:   CWGsPReg,
	_RegisterName_6[22:31]:        ModGsPReg,
	_RegisterLowerName_6[22:31]:   ModGsPReg,
	_RegisterName_6[31:39]:        TModeReg,
	_RegisterLowerName_6[31:39]:   TModeReg,
	_RegisterName_6[39:52]:        TPrescalerReg,
	_RegisterLowerName_6[39:52]:   TPrescalerReg,
	_RegisterName_6[52:63]:        TReloadRegH,
	_RegisterLowerName_6[52:63]:   TReloadRegH,
	_RegisterName_6[63:74]:        TReloadRegL,
	_RegisterLowerName_6[63:74]:   TReloadRegL,
	_RegisterName_6[74:91]:        TCounterValueRegH,
	_RegisterLowerName_6[74:91]:   TCounterValueRegH,
	_RegisterName_6[91:108]:       TCounterValueRegL,
	_RegisterLowerName_6[91:108]:  TCounterValueRegL,
	_RegisterName_7[0:11]:         TestSel1Reg,
	_RegisterLowerName_7[0:11]:    TestSel1Reg,
	_RegisterName_7[11:22]:        TestSel2Reg,
	_RegisterLowerName_7[11:22]:   TestSel2Reg,
	_RegisterName_7[22:34]:        TestPinEnReg,
	_RegisterLowerName_7[22:34]:   TestPinEnReg,
	_RegisterName_7[34:49]:        TestPinValueReg,
	_RegisterLowerName_7[34:49]:   TestPinValueReg,
	_RegisterName_7[49:59]:        TestBusReg,
	_RegisterLowerName_7[49:59]:   TestBusReg,
	_RegisterName_7[59:70]:        AutoTestReg,
	_RegisterLowerName_7[59:70]:   AutoTestReg,
	_RegisterName_7[70:80]:        VersionReg,
	_RegisterLowerName_7[70:80]:   VersionReg,
	_RegisterName_7[80:93]:        AnalogTestReg,
	_RegisterLowerName_7[80:93]:   AnalogTestReg,
	_RegisterName_7[93:104]:       TestDAC1Reg,
	_RegisterLowerName_7[93:104]:  TestDAC1Reg,
	_RegisterName_7[104:115]:      TestDAC2Reg,
	_RegisterLowerName_7[104:115]: TestDAC2Reg,
	_RegisterName_7[115:125]:      TestADCReg,
	_RegisterLowerName_7[115:125]: TestADCReg,
}

var _RegisterNames = []string{
	_RegisterName_0[0:10],
	_RegisterName_0[10:19],
	_RegisterName_0[19:28],
	_RegisterName_0[28:37],
	_RegisterName_0[37:46],
	_RegisterName_0[46:54],
	_RegisterName_0[54:64],
	_RegisterName_0[64:74],
	_RegisterName_0[74:85],
	_RegisterName_0[85:97],
	_RegisterName_0[97:110],
	_RegisterName_0[110:120],
	_RegisterName_0[120:133],
	_RegisterName_0[133:140],
	_RegisterName_1[0:7],
	_RegisterName_1[7:16],
	_RegisterName_1[16:25],
	_RegisterName_1[25:37],
	_RegisterName_1[37:45],
	_RegisterName_1[45:53],
	_RegisterName_1[53:61],
	_RegisterName_1[61:75],
	_RegisterName_1[75:83],
	_RegisterName_2[0:7],
	_RegisterName_2[7:14],
	_RegisterName_3[0:14],
	_RegisterName_4[0:13],
	_RegisterName_4[13:26],
	_RegisterName_5[0:11],
	_RegisterName_6[0:8],
	_RegisterName_6[8:14],
	_RegisterName_6[14:22],
	_RegisterName_6[22:31],
	_RegisterName_6[31:39],
	_RegisterName_6[39:52],
	_RegisterName_6[52:63],
	_RegisterName_6[63:74],
	_RegisterName_6[74:91],
	_RegisterName_6[91:108],
	_RegisterName_7[0:11],
	_RegisterName_7[11:22],
	_RegisterName_7[22:34],
	_RegisterName_7[34:49],
	_RegisterName_7[49:59],
	_RegisterName_7[59:70],
	_RegisterName_7[70:80],
	_RegisterName_7[80:93],
	_RegisterName_7[93:104],
	_RegisterName_7[104:115],
	_RegisterName_7[115:125],
}

// RegisterString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RegisterString(s string) (Register, error) {
	if val, ok := _RegisterNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RegisterNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Register values", s)
}

// RegisterValues returns all values of the enum
func RegisterValues() []Register {
	return _RegisterValues
}

// RegisterStrings returns a slice of all String values of the enum
func RegisterStrings() []string {
	strs := make([]string, len(_RegisterNames))
	copy(strs, _RegisterNames)
	return strs
}

// IsARegister returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Register) IsARegister() bool {
	for _, v := range _RegisterValues {
		if i == v {
			return true
		}
	}
	return false
}
